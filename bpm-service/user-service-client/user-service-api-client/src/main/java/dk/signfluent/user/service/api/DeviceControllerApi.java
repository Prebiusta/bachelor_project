/*
 * TITLE
 * DESCRIPTION
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package dk.signfluent.user.service.api;

import dk.signfluent.user.service.invoker.ApiCallback;
import dk.signfluent.user.service.invoker.ApiClient;
import dk.signfluent.user.service.invoker.ApiException;
import dk.signfluent.user.service.invoker.ApiResponse;
import dk.signfluent.user.service.invoker.Configuration;
import dk.signfluent.user.service.invoker.Pair;
import dk.signfluent.user.service.invoker.ProgressRequestBody;
import dk.signfluent.user.service.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import dk.signfluent.user.service.model.RegisterDeviceRequest;
import dk.signfluent.user.service.model.RegisterDeviceResponse;
import dk.signfluent.user.service.model.UpdateFCMTokenRequest;
import dk.signfluent.user.service.model.UpdateFCMTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceControllerApi {
    private ApiClient localVarApiClient;

    public DeviceControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for registerDevice
     * @param registerDeviceRequest registerDeviceRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDeviceCall(RegisterDeviceRequest registerDeviceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerDeviceRequest;

        // create path and map variables
        String localVarPath = "/api/deviceManagement/registerDevice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDeviceValidateBeforeCall(RegisterDeviceRequest registerDeviceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerDeviceRequest' is set
        if (registerDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'registerDeviceRequest' when calling registerDevice(Async)");
        }
        

        okhttp3.Call localVarCall = registerDeviceCall(registerDeviceRequest, _callback);
        return localVarCall;

    }

    /**
     * Register Device
     * 
     * @param registerDeviceRequest registerDeviceRequest (required)
     * @return RegisterDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RegisterDeviceResponse registerDevice(RegisterDeviceRequest registerDeviceRequest) throws ApiException {
        ApiResponse<RegisterDeviceResponse> localVarResp = registerDeviceWithHttpInfo(registerDeviceRequest);
        return localVarResp.getData();
    }

    /**
     * Register Device
     * 
     * @param registerDeviceRequest registerDeviceRequest (required)
     * @return ApiResponse&lt;RegisterDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterDeviceResponse> registerDeviceWithHttpInfo(RegisterDeviceRequest registerDeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = registerDeviceValidateBeforeCall(registerDeviceRequest, null);
        Type localVarReturnType = new TypeToken<RegisterDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register Device (asynchronously)
     * 
     * @param registerDeviceRequest registerDeviceRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDeviceAsync(RegisterDeviceRequest registerDeviceRequest, final ApiCallback<RegisterDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDeviceValidateBeforeCall(registerDeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<RegisterDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFCMToken
     * @param updateFCMTokenRequest updateFCMTokenRequest (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFCMTokenCall(UpdateFCMTokenRequest updateFCMTokenRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateFCMTokenRequest;

        // create path and map variables
        String localVarPath = "/api/deviceManagement/updateFCMToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFCMTokenValidateBeforeCall(UpdateFCMTokenRequest updateFCMTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'updateFCMTokenRequest' is set
        if (updateFCMTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'updateFCMTokenRequest' when calling updateFCMToken(Async)");
        }
        

        okhttp3.Call localVarCall = updateFCMTokenCall(updateFCMTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * Update FCM Token
     * 
     * @param updateFCMTokenRequest updateFCMTokenRequest (required)
     * @return UpdateFCMTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFCMTokenResponse updateFCMToken(UpdateFCMTokenRequest updateFCMTokenRequest) throws ApiException {
        ApiResponse<UpdateFCMTokenResponse> localVarResp = updateFCMTokenWithHttpInfo(updateFCMTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Update FCM Token
     * 
     * @param updateFCMTokenRequest updateFCMTokenRequest (required)
     * @return ApiResponse&lt;UpdateFCMTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateFCMTokenResponse> updateFCMTokenWithHttpInfo(UpdateFCMTokenRequest updateFCMTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFCMTokenValidateBeforeCall(updateFCMTokenRequest, null);
        Type localVarReturnType = new TypeToken<UpdateFCMTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update FCM Token (asynchronously)
     * 
     * @param updateFCMTokenRequest updateFCMTokenRequest (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFCMTokenAsync(UpdateFCMTokenRequest updateFCMTokenRequest, final ApiCallback<UpdateFCMTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFCMTokenValidateBeforeCall(updateFCMTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateFCMTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
